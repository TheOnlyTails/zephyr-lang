import { makeRecipe } from "ohm-js"
const result = makeRecipe([
	"grammar",
	{
		source:
			'Aura {\n  Program = ListOf<Expression_let, "\\n">\n\n  Expression =\n    | Expression "(" ListOf<Expression, ","> ","? ")" -- closure_call\n    | "{" ListOf<Expression, ";"> "}" -- code_block\n    | "let" "mut"? identifier (":" Type)? "=" Expression -- let\n    | "if" "(" Expression ")" Expression ("else" Expression)? -- if\n    | "while" "(" Expression ")" Expression -- while\n    | "for" "(" identifier "in" Expression ")" Expression -- for\n    | "import" importPath ("with" "(" ListOf<ImportIdent, ","> ","? ")")? -- import\n    | Expression "as" Type -- cast\n    | Expression "is" Type -- type_check\n    | unaryPrefixOperator Expression -- unary_op_prefix\n    | Expression unaryPostfixOperator -- unary_op_postfix\n    | Expression binaryOperator Expression -- binary_op\n    | ("true" | "false") -- boolean\n    | identifier -- ident\n    | float -- float\n    | int -- int\n    | char -- char\n    | string -- string\n    | "(" ListOf<ClosureParam, ","> ","? ")" "->" Expression -- closure\n    | "#[" ListOf<Expression, ","> ","? "]" -- list\n    | "#{" ListOf<MapEntry, ","> ","? "}" -- map\n    | "@{" ListOf<ObjectEntry, ","> ","? "}" -- object\n    | "(" Expression ")" -- parens\n\n    int = digit (digit | "_")*\n    float = digit (digit | "_")* "." digit (digit | "_")*\n    char = "\'" (unicodeChar+ | escapeSequence | any) "\'"\n    string = "\\"" (~"\\"" (unicodeChar+ | escapeSequence | any))* "\\""\n    escapeSequence = "\\\\" ("n" | "r" | "t" | "\'" | "\\"" | "\\\\")\n    unicodeChar = "\\\\u" hexDigit hexDigit hexDigit hexDigit\n\n    identifier = letter (alnum | "_")*\n\n    ClosureParam = identifier ":" Type\n\n    MapEntry = Expression ":" Expression\n\n    ObjectEntry = identifier ":" Expression\n\n    binaryOperator =\n      | "+" -- plus\n      | "+=" -- plus_assign\n      | "-" -- minus\n      | "-=" -- minus_assign\n      | "*" -- multiply\n      | "*=" -- multiply_assign\n      | "/" -- divide\n      | "/=" -- divide_assign\n      | "%" -- modulo\n      | "%=" -- modulo_assign\n      | "**" -- exponent\n      | "**=" -- exponent_assign\n      | "==" -- equals\n      | "!=" -- not_equals\n      | "<" -- less_than\n      | "<=" -- less_than_equals\n      | ">" -- greater_than\n      | ">=" -- greater_than_equals\n      | "&&" -- and\n      | "||" -- or\n      | "in" -- in\n      | "!in" -- not_in\n      | "=" -- assign\n\n    unaryPrefixOperator = \n      | "!" -- not\n      | "-" -- negate\n\n    unaryPostfixOperator =\n      | "++" -- increment\n      | "--" -- decrement\n\n    ImportIdent = identifier ("as" identifier)?\n    importPath = "\\"" (~"\\"" any)+ "\\""\n    \n    Type = \n      | NonemptyListOf<Type, "|"> -- union // union type, e.g. "int | string"\n      | "list" "<" Type ">" -- list // list type, e.g. "list<int>"\n      | "map" "<" Type "," Type ">" -- map // map type, e.g. "map<int, string>"\n      | "(" ListOf<Type, ","> ","? ")" "->" Type -- closure // closure type, e.g. "(int, int) -> int"\n      | "int" -- int // 32 bit signed integer\n      | "float" -- float // 64 bit floating point\n      | "char" -- char // UTF-8 character\n      | "string" -- string // UTF-8 string\n      | "boolean" -- boolean // true or false\n      | "void" -- void // no return value (only valid as return type), e.g. "(int) -> void"\n      | identifier ("<" NonemptyListOf<Type, ","> ","? ">")? -- ident // user defined type, e.g. "MyType"\n      | "(" Type ")" -- parens // parentheses, e.g. "(int)"\n}',
	},
	"Aura",
	null,
	"Program",
	{
		Program: [
			"define",
			{ sourceInterval: [9, 47] },
			null,
			[],
			[
				"app",
				{ sourceInterval: [19, 47] },
				"ListOf",
				[
					["app", { sourceInterval: [26, 40] }, "Expression_let", []],
					["terminal", { sourceInterval: [42, 46] }, "\n"],
				],
			],
		],
		Expression_closure_call: [
			"define",
			{ sourceInterval: [70, 133] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [70, 117] },
				["app", { sourceInterval: [70, 80] }, "Expression", []],
				["terminal", { sourceInterval: [81, 84] }, "("],
				[
					"app",
					{ sourceInterval: [85, 108] },
					"ListOf",
					[
						["app", { sourceInterval: [92, 102] }, "Expression", []],
						["terminal", { sourceInterval: [104, 107] }, ","],
					],
				],
				["opt", { sourceInterval: [109, 113] }, ["terminal", { sourceInterval: [109, 112] }, ","]],
				["terminal", { sourceInterval: [114, 117] }, ")"],
			],
		],
		Expression_code_block: [
			"define",
			{ sourceInterval: [140, 185] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [140, 171] },
				["terminal", { sourceInterval: [140, 143] }, "{"],
				[
					"app",
					{ sourceInterval: [144, 167] },
					"ListOf",
					[
						["app", { sourceInterval: [151, 161] }, "Expression", []],
						["terminal", { sourceInterval: [163, 166] }, ";"],
					],
				],
				["terminal", { sourceInterval: [168, 171] }, "}"],
			],
		],
		Expression_let: [
			"define",
			{ sourceInterval: [192, 249] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [192, 242] },
				["terminal", { sourceInterval: [192, 197] }, "let"],
				[
					"opt",
					{ sourceInterval: [198, 204] },
					["terminal", { sourceInterval: [198, 203] }, "mut"],
				],
				["app", { sourceInterval: [205, 215] }, "identifier", []],
				[
					"opt",
					{ sourceInterval: [216, 227] },
					[
						"seq",
						{ sourceInterval: [217, 225] },
						["terminal", { sourceInterval: [217, 220] }, ":"],
						["app", { sourceInterval: [221, 225] }, "Type", []],
					],
				],
				["terminal", { sourceInterval: [228, 231] }, "="],
				["app", { sourceInterval: [232, 242] }, "Expression", []],
			],
		],
		Expression_if: [
			"define",
			{ sourceInterval: [256, 317] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [256, 311] },
				["terminal", { sourceInterval: [256, 260] }, "if"],
				["terminal", { sourceInterval: [261, 264] }, "("],
				["app", { sourceInterval: [265, 275] }, "Expression", []],
				["terminal", { sourceInterval: [276, 279] }, ")"],
				["app", { sourceInterval: [280, 290] }, "Expression", []],
				[
					"opt",
					{ sourceInterval: [291, 311] },
					[
						"seq",
						{ sourceInterval: [292, 309] },
						["terminal", { sourceInterval: [292, 298] }, "else"],
						["app", { sourceInterval: [299, 309] }, "Expression", []],
					],
				],
			],
		],
		Expression_while: [
			"define",
			{ sourceInterval: [324, 370] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [324, 361] },
				["terminal", { sourceInterval: [324, 331] }, "while"],
				["terminal", { sourceInterval: [332, 335] }, "("],
				["app", { sourceInterval: [336, 346] }, "Expression", []],
				["terminal", { sourceInterval: [347, 350] }, ")"],
				["app", { sourceInterval: [351, 361] }, "Expression", []],
			],
		],
		Expression_for: [
			"define",
			{ sourceInterval: [377, 435] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [377, 428] },
				["terminal", { sourceInterval: [377, 382] }, "for"],
				["terminal", { sourceInterval: [383, 386] }, "("],
				["app", { sourceInterval: [387, 397] }, "identifier", []],
				["terminal", { sourceInterval: [398, 402] }, "in"],
				["app", { sourceInterval: [403, 413] }, "Expression", []],
				["terminal", { sourceInterval: [414, 417] }, ")"],
				["app", { sourceInterval: [418, 428] }, "Expression", []],
			],
		],
		Expression_import: [
			"define",
			{ sourceInterval: [442, 519] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [442, 509] },
				["terminal", { sourceInterval: [442, 450] }, "import"],
				["app", { sourceInterval: [451, 461] }, "importPath", []],
				[
					"opt",
					{ sourceInterval: [462, 509] },
					[
						"seq",
						{ sourceInterval: [463, 507] },
						["terminal", { sourceInterval: [463, 469] }, "with"],
						["terminal", { sourceInterval: [470, 473] }, "("],
						[
							"app",
							{ sourceInterval: [474, 498] },
							"ListOf",
							[
								["app", { sourceInterval: [481, 492] }, "ImportIdent", []],
								["terminal", { sourceInterval: [494, 497] }, ","],
							],
						],
						[
							"opt",
							{ sourceInterval: [499, 503] },
							["terminal", { sourceInterval: [499, 502] }, ","],
						],
						["terminal", { sourceInterval: [504, 507] }, ")"],
					],
				],
			],
		],
		Expression_cast: [
			"define",
			{ sourceInterval: [526, 554] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [526, 546] },
				["app", { sourceInterval: [526, 536] }, "Expression", []],
				["terminal", { sourceInterval: [537, 541] }, "as"],
				["app", { sourceInterval: [542, 546] }, "Type", []],
			],
		],
		Expression_type_check: [
			"define",
			{ sourceInterval: [561, 595] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [561, 581] },
				["app", { sourceInterval: [561, 571] }, "Expression", []],
				["terminal", { sourceInterval: [572, 576] }, "is"],
				["app", { sourceInterval: [577, 581] }, "Type", []],
			],
		],
		Expression_unary_op_prefix: [
			"define",
			{ sourceInterval: [602, 651] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [602, 632] },
				["app", { sourceInterval: [602, 621] }, "unaryPrefixOperator", []],
				["app", { sourceInterval: [622, 632] }, "Expression", []],
			],
		],
		Expression_unary_op_postfix: [
			"define",
			{ sourceInterval: [658, 709] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [658, 689] },
				["app", { sourceInterval: [658, 668] }, "Expression", []],
				["app", { sourceInterval: [669, 689] }, "unaryPostfixOperator", []],
			],
		],
		Expression_binary_op: [
			"define",
			{ sourceInterval: [716, 765] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [716, 752] },
				["app", { sourceInterval: [716, 726] }, "Expression", []],
				["app", { sourceInterval: [727, 741] }, "binaryOperator", []],
				["app", { sourceInterval: [742, 752] }, "Expression", []],
			],
		],
		Expression_boolean: [
			"define",
			{ sourceInterval: [772, 801] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [772, 790] },
				["terminal", { sourceInterval: [773, 779] }, "true"],
				["terminal", { sourceInterval: [782, 789] }, "false"],
			],
		],
		Expression_ident: [
			"define",
			{ sourceInterval: [808, 827] },
			null,
			[],
			["app", { sourceInterval: [808, 818] }, "identifier", []],
		],
		Expression_float: [
			"define",
			{ sourceInterval: [834, 848] },
			null,
			[],
			["app", { sourceInterval: [834, 839] }, "float", []],
		],
		Expression_int: [
			"define",
			{ sourceInterval: [855, 865] },
			null,
			[],
			["app", { sourceInterval: [855, 858] }, "int", []],
		],
		Expression_char: [
			"define",
			{ sourceInterval: [872, 884] },
			null,
			[],
			["app", { sourceInterval: [872, 876] }, "char", []],
		],
		Expression_string: [
			"define",
			{ sourceInterval: [891, 907] },
			null,
			[],
			["app", { sourceInterval: [891, 897] }, "string", []],
		],
		Expression_closure: [
			"define",
			{ sourceInterval: [914, 979] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [914, 968] },
				["terminal", { sourceInterval: [914, 917] }, "("],
				[
					"app",
					{ sourceInterval: [918, 943] },
					"ListOf",
					[
						["app", { sourceInterval: [925, 937] }, "ClosureParam", []],
						["terminal", { sourceInterval: [939, 942] }, ","],
					],
				],
				["opt", { sourceInterval: [944, 948] }, ["terminal", { sourceInterval: [944, 947] }, ","]],
				["terminal", { sourceInterval: [949, 952] }, ")"],
				["terminal", { sourceInterval: [953, 957] }, "->"],
				["app", { sourceInterval: [958, 968] }, "Expression", []],
			],
		],
		Expression_list: [
			"define",
			{ sourceInterval: [986, 1031] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [986, 1023] },
				["terminal", { sourceInterval: [986, 990] }, "#["],
				[
					"app",
					{ sourceInterval: [991, 1014] },
					"ListOf",
					[
						["app", { sourceInterval: [998, 1008] }, "Expression", []],
						["terminal", { sourceInterval: [1010, 1013] }, ","],
					],
				],
				[
					"opt",
					{ sourceInterval: [1015, 1019] },
					["terminal", { sourceInterval: [1015, 1018] }, ","],
				],
				["terminal", { sourceInterval: [1020, 1023] }, "]"],
			],
		],
		Expression_map: [
			"define",
			{ sourceInterval: [1038, 1080] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1038, 1073] },
				["terminal", { sourceInterval: [1038, 1042] }, "#{"],
				[
					"app",
					{ sourceInterval: [1043, 1064] },
					"ListOf",
					[
						["app", { sourceInterval: [1050, 1058] }, "MapEntry", []],
						["terminal", { sourceInterval: [1060, 1063] }, ","],
					],
				],
				[
					"opt",
					{ sourceInterval: [1065, 1069] },
					["terminal", { sourceInterval: [1065, 1068] }, ","],
				],
				["terminal", { sourceInterval: [1070, 1073] }, "}"],
			],
		],
		Expression_object: [
			"define",
			{ sourceInterval: [1087, 1135] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1087, 1125] },
				["terminal", { sourceInterval: [1087, 1091] }, "@{"],
				[
					"app",
					{ sourceInterval: [1092, 1116] },
					"ListOf",
					[
						["app", { sourceInterval: [1099, 1110] }, "ObjectEntry", []],
						["terminal", { sourceInterval: [1112, 1115] }, ","],
					],
				],
				[
					"opt",
					{ sourceInterval: [1117, 1121] },
					["terminal", { sourceInterval: [1117, 1120] }, ","],
				],
				["terminal", { sourceInterval: [1122, 1125] }, "}"],
			],
		],
		Expression_parens: [
			"define",
			{ sourceInterval: [1142, 1170] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1142, 1160] },
				["terminal", { sourceInterval: [1142, 1145] }, "("],
				["app", { sourceInterval: [1146, 1156] }, "Expression", []],
				["terminal", { sourceInterval: [1157, 1160] }, ")"],
			],
		],
		Expression: [
			"define",
			{ sourceInterval: [51, 1170] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [68, 1170] },
				["app", { sourceInterval: [70, 117] }, "Expression_closure_call", []],
				["app", { sourceInterval: [140, 171] }, "Expression_code_block", []],
				["app", { sourceInterval: [192, 242] }, "Expression_let", []],
				["app", { sourceInterval: [256, 311] }, "Expression_if", []],
				["app", { sourceInterval: [324, 361] }, "Expression_while", []],
				["app", { sourceInterval: [377, 428] }, "Expression_for", []],
				["app", { sourceInterval: [442, 509] }, "Expression_import", []],
				["app", { sourceInterval: [526, 546] }, "Expression_cast", []],
				["app", { sourceInterval: [561, 581] }, "Expression_type_check", []],
				["app", { sourceInterval: [602, 632] }, "Expression_unary_op_prefix", []],
				["app", { sourceInterval: [658, 689] }, "Expression_unary_op_postfix", []],
				["app", { sourceInterval: [716, 752] }, "Expression_binary_op", []],
				["app", { sourceInterval: [772, 790] }, "Expression_boolean", []],
				["app", { sourceInterval: [808, 818] }, "Expression_ident", []],
				["app", { sourceInterval: [834, 839] }, "Expression_float", []],
				["app", { sourceInterval: [855, 858] }, "Expression_int", []],
				["app", { sourceInterval: [872, 876] }, "Expression_char", []],
				["app", { sourceInterval: [891, 897] }, "Expression_string", []],
				["app", { sourceInterval: [914, 968] }, "Expression_closure", []],
				["app", { sourceInterval: [986, 1023] }, "Expression_list", []],
				["app", { sourceInterval: [1038, 1073] }, "Expression_map", []],
				["app", { sourceInterval: [1087, 1125] }, "Expression_object", []],
				["app", { sourceInterval: [1142, 1160] }, "Expression_parens", []],
			],
		],
		int: [
			"define",
			{ sourceInterval: [1176, 1202] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1182, 1202] },
				["app", { sourceInterval: [1182, 1187] }, "digit", []],
				[
					"star",
					{ sourceInterval: [1188, 1202] },
					[
						"alt",
						{ sourceInterval: [1189, 1200] },
						["app", { sourceInterval: [1189, 1194] }, "digit", []],
						["terminal", { sourceInterval: [1197, 1200] }, "_"],
					],
				],
			],
		],
		float: [
			"define",
			{ sourceInterval: [1207, 1260] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1215, 1260] },
				["app", { sourceInterval: [1215, 1220] }, "digit", []],
				[
					"star",
					{ sourceInterval: [1221, 1235] },
					[
						"alt",
						{ sourceInterval: [1222, 1233] },
						["app", { sourceInterval: [1222, 1227] }, "digit", []],
						["terminal", { sourceInterval: [1230, 1233] }, "_"],
					],
				],
				["terminal", { sourceInterval: [1236, 1239] }, "."],
				["app", { sourceInterval: [1240, 1245] }, "digit", []],
				[
					"star",
					{ sourceInterval: [1246, 1260] },
					[
						"alt",
						{ sourceInterval: [1247, 1258] },
						["app", { sourceInterval: [1247, 1252] }, "digit", []],
						["terminal", { sourceInterval: [1255, 1258] }, "_"],
					],
				],
			],
		],
		char: [
			"define",
			{ sourceInterval: [1265, 1317] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1272, 1317] },
				["terminal", { sourceInterval: [1272, 1275] }, "'"],
				[
					"alt",
					{ sourceInterval: [1277, 1312] },
					[
						"plus",
						{ sourceInterval: [1277, 1289] },
						["app", { sourceInterval: [1277, 1288] }, "unicodeChar", []],
					],
					["app", { sourceInterval: [1292, 1306] }, "escapeSequence", []],
					["app", { sourceInterval: [1309, 1312] }, "any", []],
				],
				["terminal", { sourceInterval: [1314, 1317] }, "'"],
			],
		],
		string: [
			"define",
			{ sourceInterval: [1322, 1387] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1331, 1387] },
				["terminal", { sourceInterval: [1331, 1335] }, '"'],
				[
					"star",
					{ sourceInterval: [1336, 1382] },
					[
						"seq",
						{ sourceInterval: [1337, 1380] },
						[
							"not",
							{ sourceInterval: [1337, 1342] },
							["terminal", { sourceInterval: [1338, 1342] }, '"'],
						],
						[
							"alt",
							{ sourceInterval: [1344, 1379] },
							[
								"plus",
								{ sourceInterval: [1344, 1356] },
								["app", { sourceInterval: [1344, 1355] }, "unicodeChar", []],
							],
							["app", { sourceInterval: [1359, 1373] }, "escapeSequence", []],
							["app", { sourceInterval: [1376, 1379] }, "any", []],
						],
					],
				],
				["terminal", { sourceInterval: [1383, 1387] }, '"'],
			],
		],
		escapeSequence: [
			"define",
			{ sourceInterval: [1392, 1451] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1409, 1451] },
				["terminal", { sourceInterval: [1409, 1413] }, "\\"],
				[
					"alt",
					{ sourceInterval: [1415, 1450] },
					["terminal", { sourceInterval: [1415, 1418] }, "n"],
					["terminal", { sourceInterval: [1421, 1424] }, "r"],
					["terminal", { sourceInterval: [1427, 1430] }, "t"],
					["terminal", { sourceInterval: [1433, 1436] }, "'"],
					["terminal", { sourceInterval: [1439, 1443] }, '"'],
					["terminal", { sourceInterval: [1446, 1450] }, "\\"],
				],
			],
		],
		unicodeChar: [
			"define",
			{ sourceInterval: [1456, 1511] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1470, 1511] },
				["terminal", { sourceInterval: [1470, 1475] }, "\\u"],
				["app", { sourceInterval: [1476, 1484] }, "hexDigit", []],
				["app", { sourceInterval: [1485, 1493] }, "hexDigit", []],
				["app", { sourceInterval: [1494, 1502] }, "hexDigit", []],
				["app", { sourceInterval: [1503, 1511] }, "hexDigit", []],
			],
		],
		identifier: [
			"define",
			{ sourceInterval: [1517, 1551] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1530, 1551] },
				["app", { sourceInterval: [1530, 1536] }, "letter", []],
				[
					"star",
					{ sourceInterval: [1537, 1551] },
					[
						"alt",
						{ sourceInterval: [1538, 1549] },
						["app", { sourceInterval: [1538, 1543] }, "alnum", []],
						["terminal", { sourceInterval: [1546, 1549] }, "_"],
					],
				],
			],
		],
		ClosureParam: [
			"define",
			{ sourceInterval: [1557, 1591] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1572, 1591] },
				["app", { sourceInterval: [1572, 1582] }, "identifier", []],
				["terminal", { sourceInterval: [1583, 1586] }, ":"],
				["app", { sourceInterval: [1587, 1591] }, "Type", []],
			],
		],
		MapEntry: [
			"define",
			{ sourceInterval: [1597, 1633] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1608, 1633] },
				["app", { sourceInterval: [1608, 1618] }, "Expression", []],
				["terminal", { sourceInterval: [1619, 1622] }, ":"],
				["app", { sourceInterval: [1623, 1633] }, "Expression", []],
			],
		],
		ObjectEntry: [
			"define",
			{ sourceInterval: [1639, 1678] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [1653, 1678] },
				["app", { sourceInterval: [1653, 1663] }, "identifier", []],
				["terminal", { sourceInterval: [1664, 1667] }, ":"],
				["app", { sourceInterval: [1668, 1678] }, "Expression", []],
			],
		],
		binaryOperator_plus: [
			"define",
			{ sourceInterval: [1709, 1720] },
			null,
			[],
			["terminal", { sourceInterval: [1709, 1712] }, "+"],
		],
		binaryOperator_plus_assign: [
			"define",
			{ sourceInterval: [1729, 1748] },
			null,
			[],
			["terminal", { sourceInterval: [1729, 1733] }, "+="],
		],
		binaryOperator_minus: [
			"define",
			{ sourceInterval: [1757, 1769] },
			null,
			[],
			["terminal", { sourceInterval: [1757, 1760] }, "-"],
		],
		binaryOperator_minus_assign: [
			"define",
			{ sourceInterval: [1778, 1798] },
			null,
			[],
			["terminal", { sourceInterval: [1778, 1782] }, "-="],
		],
		binaryOperator_multiply: [
			"define",
			{ sourceInterval: [1807, 1822] },
			null,
			[],
			["terminal", { sourceInterval: [1807, 1810] }, "*"],
		],
		binaryOperator_multiply_assign: [
			"define",
			{ sourceInterval: [1831, 1854] },
			null,
			[],
			["terminal", { sourceInterval: [1831, 1835] }, "*="],
		],
		binaryOperator_divide: [
			"define",
			{ sourceInterval: [1863, 1876] },
			null,
			[],
			["terminal", { sourceInterval: [1863, 1866] }, "/"],
		],
		binaryOperator_divide_assign: [
			"define",
			{ sourceInterval: [1885, 1906] },
			null,
			[],
			["terminal", { sourceInterval: [1885, 1889] }, "/="],
		],
		binaryOperator_modulo: [
			"define",
			{ sourceInterval: [1915, 1928] },
			null,
			[],
			["terminal", { sourceInterval: [1915, 1918] }, "%"],
		],
		binaryOperator_modulo_assign: [
			"define",
			{ sourceInterval: [1937, 1958] },
			null,
			[],
			["terminal", { sourceInterval: [1937, 1941] }, "%="],
		],
		binaryOperator_exponent: [
			"define",
			{ sourceInterval: [1967, 1983] },
			null,
			[],
			["terminal", { sourceInterval: [1967, 1971] }, "**"],
		],
		binaryOperator_exponent_assign: [
			"define",
			{ sourceInterval: [1992, 2016] },
			null,
			[],
			["terminal", { sourceInterval: [1992, 1997] }, "**="],
		],
		binaryOperator_equals: [
			"define",
			{ sourceInterval: [2025, 2039] },
			null,
			[],
			["terminal", { sourceInterval: [2025, 2029] }, "=="],
		],
		binaryOperator_not_equals: [
			"define",
			{ sourceInterval: [2048, 2066] },
			null,
			[],
			["terminal", { sourceInterval: [2048, 2052] }, "!="],
		],
		binaryOperator_less_than: [
			"define",
			{ sourceInterval: [2075, 2091] },
			null,
			[],
			["terminal", { sourceInterval: [2075, 2078] }, "<"],
		],
		binaryOperator_less_than_equals: [
			"define",
			{ sourceInterval: [2100, 2124] },
			null,
			[],
			["terminal", { sourceInterval: [2100, 2104] }, "<="],
		],
		binaryOperator_greater_than: [
			"define",
			{ sourceInterval: [2133, 2152] },
			null,
			[],
			["terminal", { sourceInterval: [2133, 2136] }, ">"],
		],
		binaryOperator_greater_than_equals: [
			"define",
			{ sourceInterval: [2161, 2188] },
			null,
			[],
			["terminal", { sourceInterval: [2161, 2165] }, ">="],
		],
		binaryOperator_and: [
			"define",
			{ sourceInterval: [2197, 2208] },
			null,
			[],
			["terminal", { sourceInterval: [2197, 2201] }, "&&"],
		],
		binaryOperator_or: [
			"define",
			{ sourceInterval: [2217, 2227] },
			null,
			[],
			["terminal", { sourceInterval: [2217, 2221] }, "||"],
		],
		binaryOperator_in: [
			"define",
			{ sourceInterval: [2236, 2246] },
			null,
			[],
			["terminal", { sourceInterval: [2236, 2240] }, "in"],
		],
		binaryOperator_not_in: [
			"define",
			{ sourceInterval: [2255, 2270] },
			null,
			[],
			["terminal", { sourceInterval: [2255, 2260] }, "!in"],
		],
		binaryOperator_assign: [
			"define",
			{ sourceInterval: [2279, 2292] },
			null,
			[],
			["terminal", { sourceInterval: [2279, 2282] }, "="],
		],
		binaryOperator: [
			"define",
			{ sourceInterval: [1684, 2292] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [1707, 2292] },
				["app", { sourceInterval: [1709, 1712] }, "binaryOperator_plus", []],
				["app", { sourceInterval: [1729, 1733] }, "binaryOperator_plus_assign", []],
				["app", { sourceInterval: [1757, 1760] }, "binaryOperator_minus", []],
				["app", { sourceInterval: [1778, 1782] }, "binaryOperator_minus_assign", []],
				["app", { sourceInterval: [1807, 1810] }, "binaryOperator_multiply", []],
				["app", { sourceInterval: [1831, 1835] }, "binaryOperator_multiply_assign", []],
				["app", { sourceInterval: [1863, 1866] }, "binaryOperator_divide", []],
				["app", { sourceInterval: [1885, 1889] }, "binaryOperator_divide_assign", []],
				["app", { sourceInterval: [1915, 1918] }, "binaryOperator_modulo", []],
				["app", { sourceInterval: [1937, 1941] }, "binaryOperator_modulo_assign", []],
				["app", { sourceInterval: [1967, 1971] }, "binaryOperator_exponent", []],
				["app", { sourceInterval: [1992, 1997] }, "binaryOperator_exponent_assign", []],
				["app", { sourceInterval: [2025, 2029] }, "binaryOperator_equals", []],
				["app", { sourceInterval: [2048, 2052] }, "binaryOperator_not_equals", []],
				["app", { sourceInterval: [2075, 2078] }, "binaryOperator_less_than", []],
				["app", { sourceInterval: [2100, 2104] }, "binaryOperator_less_than_equals", []],
				["app", { sourceInterval: [2133, 2136] }, "binaryOperator_greater_than", []],
				["app", { sourceInterval: [2161, 2165] }, "binaryOperator_greater_than_equals", []],
				["app", { sourceInterval: [2197, 2201] }, "binaryOperator_and", []],
				["app", { sourceInterval: [2217, 2221] }, "binaryOperator_or", []],
				["app", { sourceInterval: [2236, 2240] }, "binaryOperator_in", []],
				["app", { sourceInterval: [2255, 2260] }, "binaryOperator_not_in", []],
				["app", { sourceInterval: [2279, 2282] }, "binaryOperator_assign", []],
			],
		],
		unaryPrefixOperator_not: [
			"define",
			{ sourceInterval: [2329, 2339] },
			null,
			[],
			["terminal", { sourceInterval: [2329, 2332] }, "!"],
		],
		unaryPrefixOperator_negate: [
			"define",
			{ sourceInterval: [2348, 2361] },
			null,
			[],
			["terminal", { sourceInterval: [2348, 2351] }, "-"],
		],
		unaryPrefixOperator: [
			"define",
			{ sourceInterval: [2298, 2361] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [2327, 2361] },
				["app", { sourceInterval: [2329, 2332] }, "unaryPrefixOperator_not", []],
				["app", { sourceInterval: [2348, 2351] }, "unaryPrefixOperator_negate", []],
			],
		],
		unaryPostfixOperator_increment: [
			"define",
			{ sourceInterval: [2398, 2415] },
			null,
			[],
			["terminal", { sourceInterval: [2398, 2402] }, "++"],
		],
		unaryPostfixOperator_decrement: [
			"define",
			{ sourceInterval: [2424, 2441] },
			null,
			[],
			["terminal", { sourceInterval: [2424, 2428] }, "--"],
		],
		unaryPostfixOperator: [
			"define",
			{ sourceInterval: [2367, 2441] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [2396, 2441] },
				["app", { sourceInterval: [2398, 2402] }, "unaryPostfixOperator_increment", []],
				["app", { sourceInterval: [2424, 2428] }, "unaryPostfixOperator_decrement", []],
			],
		],
		ImportIdent: [
			"define",
			{ sourceInterval: [2447, 2490] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [2461, 2490] },
				["app", { sourceInterval: [2461, 2471] }, "identifier", []],
				[
					"opt",
					{ sourceInterval: [2472, 2490] },
					[
						"seq",
						{ sourceInterval: [2473, 2488] },
						["terminal", { sourceInterval: [2473, 2477] }, "as"],
						["app", { sourceInterval: [2478, 2488] }, "identifier", []],
					],
				],
			],
		],
		importPath: [
			"define",
			{ sourceInterval: [2495, 2530] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [2508, 2530] },
				["terminal", { sourceInterval: [2508, 2512] }, '"'],
				[
					"plus",
					{ sourceInterval: [2513, 2525] },
					[
						"seq",
						{ sourceInterval: [2514, 2523] },
						[
							"not",
							{ sourceInterval: [2514, 2519] },
							["terminal", { sourceInterval: [2515, 2519] }, '"'],
						],
						["app", { sourceInterval: [2520, 2523] }, "any", []],
					],
				],
				["terminal", { sourceInterval: [2526, 2530] }, '"'],
			],
		],
		Type_union: [
			"define",
			{ sourceInterval: [2556, 2625] },
			null,
			[],
			[
				"app",
				{ sourceInterval: [2556, 2581] },
				"NonemptyListOf",
				[
					["app", { sourceInterval: [2571, 2575] }, "Type", []],
					["terminal", { sourceInterval: [2577, 2580] }, "|"],
				],
			],
		],
		Type_list: [
			"define",
			{ sourceInterval: [2634, 2692] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [2634, 2653] },
				["terminal", { sourceInterval: [2634, 2640] }, "list"],
				["terminal", { sourceInterval: [2641, 2644] }, "<"],
				["app", { sourceInterval: [2645, 2649] }, "Type", []],
				["terminal", { sourceInterval: [2650, 2653] }, ">"],
			],
		],
		Type_map: [
			"define",
			{ sourceInterval: [2701, 2772] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [2701, 2728] },
				["terminal", { sourceInterval: [2701, 2706] }, "map"],
				["terminal", { sourceInterval: [2707, 2710] }, "<"],
				["app", { sourceInterval: [2711, 2715] }, "Type", []],
				["terminal", { sourceInterval: [2716, 2719] }, ","],
				["app", { sourceInterval: [2720, 2724] }, "Type", []],
				["terminal", { sourceInterval: [2725, 2728] }, ">"],
			],
		],
		Type_closure: [
			"define",
			{ sourceInterval: [2781, 2874] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [2781, 2821] },
				["terminal", { sourceInterval: [2781, 2784] }, "("],
				[
					"app",
					{ sourceInterval: [2785, 2802] },
					"ListOf",
					[
						["app", { sourceInterval: [2792, 2796] }, "Type", []],
						["terminal", { sourceInterval: [2798, 2801] }, ","],
					],
				],
				[
					"opt",
					{ sourceInterval: [2803, 2807] },
					["terminal", { sourceInterval: [2803, 2806] }, ","],
				],
				["terminal", { sourceInterval: [2808, 2811] }, ")"],
				["terminal", { sourceInterval: [2812, 2816] }, "->"],
				["app", { sourceInterval: [2817, 2821] }, "Type", []],
			],
		],
		Type_int: [
			"define",
			{ sourceInterval: [2883, 2920] },
			null,
			[],
			["terminal", { sourceInterval: [2883, 2888] }, "int"],
		],
		Type_float: [
			"define",
			{ sourceInterval: [2929, 2970] },
			null,
			[],
			["terminal", { sourceInterval: [2929, 2936] }, "float"],
		],
		Type_char: [
			"define",
			{ sourceInterval: [2979, 3012] },
			null,
			[],
			["terminal", { sourceInterval: [2979, 2985] }, "char"],
		],
		Type_string: [
			"define",
			{ sourceInterval: [3021, 3055] },
			null,
			[],
			["terminal", { sourceInterval: [3021, 3029] }, "string"],
		],
		Type_boolean: [
			"define",
			{ sourceInterval: [3064, 3101] },
			null,
			[],
			["terminal", { sourceInterval: [3064, 3073] }, "boolean"],
		],
		Type_void: [
			"define",
			{ sourceInterval: [3110, 3193] },
			null,
			[],
			["terminal", { sourceInterval: [3110, 3116] }, "void"],
		],
		Type_ident: [
			"define",
			{ sourceInterval: [3202, 3299] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [3202, 3254] },
				["app", { sourceInterval: [3202, 3212] }, "identifier", []],
				[
					"opt",
					{ sourceInterval: [3213, 3254] },
					[
						"seq",
						{ sourceInterval: [3214, 3252] },
						["terminal", { sourceInterval: [3214, 3217] }, "<"],
						[
							"app",
							{ sourceInterval: [3218, 3243] },
							"NonemptyListOf",
							[
								["app", { sourceInterval: [3233, 3237] }, "Type", []],
								["terminal", { sourceInterval: [3239, 3242] }, ","],
							],
						],
						[
							"opt",
							{ sourceInterval: [3244, 3248] },
							["terminal", { sourceInterval: [3244, 3247] }, ","],
						],
						["terminal", { sourceInterval: [3249, 3252] }, ">"],
					],
				],
			],
		],
		Type_parens: [
			"define",
			{ sourceInterval: [3308, 3359] },
			null,
			[],
			[
				"seq",
				{ sourceInterval: [3308, 3320] },
				["terminal", { sourceInterval: [3308, 3311] }, "("],
				["app", { sourceInterval: [3312, 3316] }, "Type", []],
				["terminal", { sourceInterval: [3317, 3320] }, ")"],
			],
		],
		Type: [
			"define",
			{ sourceInterval: [2540, 3359] },
			null,
			[],
			[
				"alt",
				{ sourceInterval: [2554, 3359] },
				["app", { sourceInterval: [2556, 2581] }, "Type_union", []],
				["app", { sourceInterval: [2634, 2653] }, "Type_list", []],
				["app", { sourceInterval: [2701, 2728] }, "Type_map", []],
				["app", { sourceInterval: [2781, 2821] }, "Type_closure", []],
				["app", { sourceInterval: [2883, 2888] }, "Type_int", []],
				["app", { sourceInterval: [2929, 2936] }, "Type_float", []],
				["app", { sourceInterval: [2979, 2985] }, "Type_char", []],
				["app", { sourceInterval: [3021, 3029] }, "Type_string", []],
				["app", { sourceInterval: [3064, 3073] }, "Type_boolean", []],
				["app", { sourceInterval: [3110, 3116] }, "Type_void", []],
				["app", { sourceInterval: [3202, 3254] }, "Type_ident", []],
				["app", { sourceInterval: [3308, 3320] }, "Type_parens", []],
			],
		],
	},
])
export default result
