Aura {
  Program = ListOf<Expression_let, "\n">

  Expression =
    | Expression "(" ListOf<Expression, ","> ","? ")" -- closure_call
    | "{" ListOf<Expression, ";"> "}" -- code_block
    | "let" "mut"? identifier (":" Type)? "=" Expression -- let
    | "if" "(" Expression ")" Expression ("else" Expression)? -- if
    | "while" "(" Expression ")" Expression -- while
    | "for" "(" identifier "in" Expression ")" Expression -- for
    | "import" importPath ("with" "(" ListOf<ImportIdent, ","> ","? ")")? -- import
    | Expression "as" Type -- cast
    | Expression "is" Type -- type_check
    | unaryPrefixOperator Expression -- unary_op_prefix
    | Expression unaryPostfixOperator -- unary_op_postfix
    | Expression binaryOperator Expression -- binary_op
    | ("true" | "false") -- boolean
    | identifier -- ident
    | float -- float
    | int -- int
    | char -- char
    | string -- string
    | "(" ListOf<ClosureParam, ","> ","? ")" "->" Expression -- closure
    | "#[" ListOf<Expression, ","> ","? "]" -- list
    | "#{" ListOf<MapEntry, ","> ","? "}" -- map
    | "#(" ListOf<Expression, ","> ","? ")" -- tuple
    | "@{" ListOf<ObjectEntry, ","> ","? "}" -- object
    | "(" Expression ")" -- parens

    int = digit (digit | "_")*
    float = digit (digit | "_")* "." digit (digit | "_")*
    char = "'" (unicodeChar+ | escapeSequence | any) "'"
    string = "\"" (~"\"" (unicodeChar+ | escapeSequence | any))* "\""
    escapeSequence = "\\" ("n" | "r" | "t" | "'" | "\"" | "\\")
    unicodeChar = "\\u" hexDigit hexDigit hexDigit hexDigit

    identifier = letter (alnum | "_")*

    ClosureParam = identifier ":" Type

    MapEntry = Expression ":" Expression

    ObjectEntry = identifier ":" Expression

    binaryOperator =
      | "+" -- plus
      | "+=" -- plus_assign
      | "-" -- minus
      | "-=" -- minus_assign
      | "*" -- multiply
      | "*=" -- multiply_assign
      | "/" -- divide
      | "/=" -- divide_assign
      | "%" -- modulo
      | "%=" -- modulo_assign
      | "**" -- exponent
      | "**=" -- exponent_assign
      | "==" -- equals
      | "!=" -- not_equals
      | "<" -- less_than
      | "<=" -- less_than_equals
      | ">" -- greater_than
      | ">=" -- greater_than_equals
      | "&&" -- and
      | "||" -- or
      | "in" -- in
      | "!in" -- not_in
      | "=" -- assign

    unaryPrefixOperator = 
      | "!" -- not
      | "-" -- negate

    unaryPostfixOperator =
      | "++" -- increment
      | "--" -- decrement

    ImportIdent = identifier ("as" identifier)?
    importPath = "\"" (~"\"" any)+ "\""
    
    Type = 
      | NonemptyListOf<Type, "|"> -- union // union type, e.g. "int | string"
      | "#[" Type "]" -- list // list type, e.g. "#[int]"
      | "#{" Type ":" Type "}" -- map // map type, e.g. "#{ int: string }"
      | "#(" ListOf<Type, ","> ","? ")" -- tuple // tuple type, e.g. "#(int, string)"
      | "@{" ListOf<ObjectTypeEntry, ","> ","? "}" -- object // object type, e.g. "@{ a: int, b: string }"
      | "(" ListOf<Type, ","> ","? ")" "->" Type -- closure // closure type, e.g. "(int, int) -> int"
      | "int" -- int // 32 bit signed integer
      | "float" -- float // 64 bit floating point
      | "char" -- char // UTF-8 character
      | "string" -- string // UTF-8 string
      | "boolean" -- boolean // true or false
      | "void" -- void // no return value (only valid as return type), e.g. "(int) -> void"
      | identifier ("<" NonemptyListOf<Type, ","> ","? ">")? -- ident // user defined type, e.g. "MyType"
      | "(" Type ")" -- parens // parentheses, e.g. "(int)"

    ObjectTypeEntry = identifier ":" Type
}
